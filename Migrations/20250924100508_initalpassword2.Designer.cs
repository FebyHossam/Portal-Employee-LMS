// <auto-generated />
using System;
using Leave_Mangement_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Leave_Mangement_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924100508_initalpassword2")]
    partial class initalpassword2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Leave_Mangement_System.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsHR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DeptId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DeptId = 1,
                            Name = "Human Resources"
                        },
                        new
                        {
                            DeptId = 2,
                            Name = "Information Technology"
                        },
                        new
                        {
                            DeptId = 3,
                            Name = "Finance"
                        },
                        new
                        {
                            DeptId = 4,
                            Name = "Marketing"
                        },
                        new
                        {
                            DeptId = 5,
                            Name = "Operations"
                        },
                        new
                        {
                            DeptId = 6,
                            Name = "Sales"
                        });
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"));

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Hr")
                        .HasColumnType("bit");

                    b.Property<string>("InitialPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveBalance")
                        .HasColumnType("int");

                    b.Property<bool>("Manager")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmpId");

                    b.HasIndex("DeptId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmpId = 1,
                            DeptId = 1,
                            Email = "ahmed.hassan@company.com",
                            EmployeeName = "Ahmed Hassan",
                            Hr = true,
                            LeaveBalance = 35,
                            Manager = true,
                            PolicyId = 3
                        },
                        new
                        {
                            EmpId = 2,
                            DeptId = 1,
                            Email = "fatma.mohamed@company.com",
                            EmployeeName = "Fatma Mohamed",
                            Hr = true,
                            LeaveBalance = 28,
                            Manager = false,
                            ManagerEmail = "ahmed.hassan@company.com",
                            ManagerName = "Ahmed Hassan",
                            PolicyId = 2
                        },
                        new
                        {
                            EmpId = 3,
                            DeptId = 2,
                            Email = "omar.ali@company.com",
                            EmployeeName = "Omar Ali",
                            Hr = false,
                            LeaveBalance = 30,
                            Manager = true,
                            PolicyId = 3
                        },
                        new
                        {
                            EmpId = 4,
                            DeptId = 2,
                            Email = "mona.ibrahim@company.com",
                            EmployeeName = "Mona Ibrahim",
                            Hr = false,
                            LeaveBalance = 21,
                            Manager = false,
                            ManagerEmail = "omar.ali@company.com",
                            ManagerName = "Omar Ali",
                            PolicyId = 1
                        },
                        new
                        {
                            EmpId = 5,
                            DeptId = 2,
                            Email = "khaled.mahmoud@company.com",
                            EmployeeName = "Khaled Mahmoud",
                            Hr = false,
                            LeaveBalance = 25,
                            Manager = false,
                            ManagerEmail = "omar.ali@company.com",
                            ManagerName = "Omar Ali",
                            PolicyId = 2
                        },
                        new
                        {
                            EmpId = 6,
                            DeptId = 3,
                            Email = "sara.ahmed@company.com",
                            EmployeeName = "Sara Ahmed",
                            Hr = false,
                            LeaveBalance = 32,
                            Manager = true,
                            PolicyId = 3
                        },
                        new
                        {
                            EmpId = 7,
                            DeptId = 3,
                            Email = "mohamed.youssef@company.com",
                            EmployeeName = "Mohamed Youssef",
                            Hr = false,
                            LeaveBalance = 18,
                            Manager = false,
                            ManagerEmail = "sara.ahmed@company.com",
                            ManagerName = "Sara Ahmed",
                            PolicyId = 1
                        },
                        new
                        {
                            EmpId = 8,
                            DeptId = 4,
                            Email = "nour.kamal@company.com",
                            EmployeeName = "Nour Kamal",
                            Hr = false,
                            LeaveBalance = 28,
                            Manager = true,
                            PolicyId = 3
                        },
                        new
                        {
                            EmpId = 9,
                            DeptId = 4,
                            Email = "amr.salah@company.com",
                            EmployeeName = "Amr Salah",
                            Hr = false,
                            LeaveBalance = 22,
                            Manager = false,
                            ManagerEmail = "nour.kamal@company.com",
                            ManagerName = "Nour Kamal",
                            PolicyId = 1
                        },
                        new
                        {
                            EmpId = 10,
                            DeptId = 5,
                            Email = "heba.mostafa@company.com",
                            EmployeeName = "Heba Mostafa",
                            Hr = false,
                            LeaveBalance = 35,
                            Manager = true,
                            PolicyId = 3
                        },
                        new
                        {
                            EmpId = 11,
                            DeptId = 5,
                            Email = "tamer.rashad@company.com",
                            EmployeeName = "Tamer Rashad",
                            Hr = false,
                            LeaveBalance = 19,
                            Manager = false,
                            ManagerEmail = "heba.mostafa@company.com",
                            ManagerName = "Heba Mostafa",
                            PolicyId = 1
                        },
                        new
                        {
                            EmpId = 12,
                            DeptId = 6,
                            Email = "yasmin.fouad@company.com",
                            EmployeeName = "Yasmin Fouad",
                            Hr = false,
                            LeaveBalance = 30,
                            Manager = true,
                            PolicyId = 2
                        },
                        new
                        {
                            EmpId = 13,
                            DeptId = 6,
                            Email = "hassan.gamal@company.com",
                            EmployeeName = "Hassan Gamal",
                            Hr = false,
                            LeaveBalance = 15,
                            Manager = false,
                            ManagerEmail = "yasmin.fouad@company.com",
                            ManagerName = "Yasmin Fouad",
                            PolicyId = 1
                        },
                        new
                        {
                            EmpId = 14,
                            DeptId = 6,
                            Email = "rana.tarek@company.com",
                            EmployeeName = "Rana Tarek",
                            Hr = false,
                            LeaveBalance = 26,
                            Manager = false,
                            ManagerEmail = "yasmin.fouad@company.com",
                            ManagerName = "Yasmin Fouad",
                            PolicyId = 2
                        });
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.LeavePolicy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"));

                    b.Property<int>("ExceptionDays")
                        .HasColumnType("int");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegularDays")
                        .HasColumnType("int");

                    b.HasKey("PolicyId");

                    b.ToTable("LeavePolicies");

                    b.HasData(
                        new
                        {
                            PolicyId = 1,
                            ExceptionDays = 5,
                            PolicyName = "Standard Policy",
                            RegularDays = 21
                        },
                        new
                        {
                            PolicyId = 2,
                            ExceptionDays = 10,
                            PolicyName = "Senior Policy",
                            RegularDays = 30
                        },
                        new
                        {
                            PolicyId = 3,
                            ExceptionDays = 15,
                            PolicyName = "Management Policy",
                            RegularDays = 35
                        },
                        new
                        {
                            PolicyId = 4,
                            ExceptionDays = 20,
                            PolicyName = "Executive Policy",
                            RegularDays = 40
                        });
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.LeaveRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HrApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("ManagerApproved")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.HasIndex("EmpId");

                    b.ToTable("LeaveRequests");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            EmpId = 4,
                            EndDate = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HrApproved = true,
                            IsRejected = false,
                            ManagerApproved = true,
                            NumberOfDays = 5,
                            StartDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 2,
                            EmpId = 7,
                            EndDate = new DateTime(2025, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HrApproved = false,
                            IsRejected = false,
                            ManagerApproved = true,
                            NumberOfDays = 3,
                            StartDate = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 3,
                            EmpId = 9,
                            EndDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HrApproved = false,
                            IsRejected = true,
                            ManagerApproved = false,
                            NumberOfDays = 10,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 4,
                            EmpId = 11,
                            EndDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HrApproved = false,
                            IsRejected = false,
                            ManagerApproved = false,
                            NumberOfDays = 6,
                            StartDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 5,
                            EmpId = 13,
                            EndDate = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HrApproved = true,
                            IsRejected = false,
                            ManagerApproved = true,
                            NumberOfDays = 3,
                            StartDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RequestId = 6,
                            EmpId = 5,
                            EndDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HrApproved = false,
                            IsRejected = false,
                            ManagerApproved = true,
                            NumberOfDays = 5,
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.Employee", b =>
                {
                    b.HasOne("Leave_Mangement_System.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leave_Mangement_System.Models.LeavePolicy", "LeavePolicy")
                        .WithMany("Employees")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leave_Mangement_System.Models.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Leave_Mangement_System.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("LeavePolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.LeaveRequest", b =>
                {
                    b.HasOne("Leave_Mangement_System.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Leave_Mangement_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Leave_Mangement_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leave_Mangement_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Leave_Mangement_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.ApplicationUser", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.Employee", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("Leave_Mangement_System.Models.LeavePolicy", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
